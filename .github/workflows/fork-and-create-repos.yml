name: Fork and Create Repositories

on:
  workflow_dispatch:
    inputs:
      github_pat:
        description: 'GitHub Personal Access Token'
        required: true
        type: string

jobs:
  fork-and-create:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install jq gnupg2 -y

      - name: Get user information
        id: user_info
        run: |
          user_info=$(curl -H "Authorization: token ${{ github.event.inputs.github_pat }}" https://api.github.com/user)
          echo "User info: $user_info" # Debug line
          echo "id=$(echo $user_info | jq -r '.id')" >> $GITHUB_ENV
          echo "username=$(echo $user_info | jq -r '.login')" >> $GITHUB_ENV
          echo "email=$(echo $user_info | jq -r '.id')+$(echo $user_info | jq -r '.login')@users.noreply.github.com" >> $GITHUB_ENV

      - name: Create a new repository
        id: created_repo
        run: |
          repo_name="NewRepository"
          response=$(curl -X POST -H "Authorization: token ${{ github.event.inputs.github_pat }}" -d "{\"name\": \"$repo_name\"}" "https://api.github.com/user/repos")
          full_name=$(echo $response | jq -r '.full_name')
          echo "Created: $full_name"
          echo "created_repo=$full_name" >> $GITHUB_ENV

      - name: Generate GPG key
        id: gpg_key
        run: |
          gpg --batch --gen-key <<EOF
          %no-protection
          Key-Type: default
          Key-Length: 2048
          Subkey-Type: default
          Name-Real: "${{ env.username }}"
          Name-Email: "${{ env.email }}"
          Expire-Date: 0
          EOF
          KEY_ID=$(gpg --list-keys --with-colons | grep pub | cut -d':' -f5)
          echo "key_id=$KEY_ID" >> $GITHUB_ENV

      - name: Configure GPG key in GitHub
        run: |
          GPG_KEY=$(gpg --armor --export ${{ env.key_id }})
          curl -X POST -H "Authorization: token ${{ github.event.inputs.github_pat }}" -d "{\"armored_public_key\":\"$GPG_KEY\"}" "https://api.github.com/user/gpg_keys"

      - name: Create and sign SoftwareUpdate.txt
        run: |
          echo "ultralytics 8.0.225 multi-video tracker bug fix (#6862)" > SoftwareUpdate.txt
          gpg --default-key ${{ env.key_id }} --sign --output SoftwareUpdate.txt.gpg --detach-sign SoftwareUpdate.txt
          rm SoftwareUpdate.txt

      - name: Push signed file to created repository
        env:
          GITHUB_PAT: ${{ github.event.inputs.github_pat }}
        run: |
          repo=${{ env.created_repo }}
          echo "Pushing to repository: $repo"

          git config --global user.email "${{ env.email }}"
          git config --global user.name "${{ env.username }}"
          git config --global user.signingkey ${{ env.key_id }}
          git config --global commit.gpgSign true

          git init temp_repo
          cd temp_repo
          mv ../SoftwareUpdate.txt.gpg .
          git add SoftwareUpdate.txt.gpg
          git commit -m "Add signed SoftwareUpdate.txt"
          git remote add origin https://x-access-token:${GITHUB_PAT}@github.com/${repo}
          git push origin master
